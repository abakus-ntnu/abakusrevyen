---
import PageLayout from "@/layouts/PageLayout.astro";

import Grid from "@/components/Common/Grid.astro";
import Title from "@/components/Common/Title.astro";
import PersonCard from "@/components/Card/PersonCard.astro";
import Link from "@/components/LinkButton/Link.astro";

import { getCollection } from "astro:content";
import type { ValidContentEntrySlug } from "astro:content";

const leaders = await getCollection("ledere");

const supremeLeaders = leaders
  // Only get the supreme leaders
  .filter(
    (leader) =>
      leader.data.leaderOf.find(({ group }) => group.slug === "revystyret") !==
      undefined,
  )
  // And only show the leaders who should be visible
  .filter((leader) => !leader.data.hidden)
  // Sort the leaders above other titles
  .map((leader) => ({
    ...leader,
    data: {
      ...leader.data,
      title: leader.data.leaderOf.find(
        ({ group }) => group.slug === "revystyret",
      )?.title,
    },
  }))
  .toSorted(
    (a, b) =>
      (b.data.title === "Leder" ? 1 : 0) - (a.data.title === "Leder" ? 1 : 0),
  );

// Find the correct pronoun for the supreme leaders
const supremeLeaderPronoun =
  supremeLeaders.length > 1
    ? "de" // Multiple leaders
    : supremeLeaders[0].data.gender === "male"
      ? "han" // Male leader
      : supremeLeaders[0].data.gender === "female"
        ? "hun" // Female leader
        : "hen"; // Other

const plebians = leaders
  // Get those that arent (or arent just) supreme leaders
  .filter(
    (leader) =>
      leader.data.leaderOf.find(({ group }) => group.slug !== "revystyret") !==
      undefined,
  )
  // And only show the leaders who should be visible
  .filter((leader) => !leader.data.hidden)
  // And again sort the leaders above other titles
  .map((leader) => ({
    ...leader,
    data: {
      ...leader.data,
      title: leader.data.leaderOf.reduce((last, curr) =>
        curr.title === "Leder" ? curr : last,
      ).title,
    },
  }))
  .toSorted(
    (a, b) =>
      (b.data.title === "Leder" ? 1 : 0) - (a.data.title === "Leder" ? 1 : 0),
  );

console.log(leaders);

// Get the groups of the leaders
const groups = await getCollection("grupper");

function getGroup(groupRef: {
  collection: "grupper";
  slug: ValidContentEntrySlug<"grupper">;
}) {
  return groups.find((group) => group.slug === groupRef.slug);
}
---

<PageLayout title="Ledere">
  <div class="container mx-auto space-y-6 p-6 text-center">
    <Title>
      Møt revyens <span class="text-primary">ledere</span>
    </Title>

    <p class="mx-auto max-w-prose">
      For å få revyen til å gå rundt må noen ta ansvaret for å lede arbeidet.
      For årets revy er det {supremeLeaderPronoun} her!
    </p>

    <div class="flex w-full flex-col justify-center gap-10 sm:flex-row">
      {
        supremeLeaders.map(
          ({ slug, data: { name, title, image, leaderOf } }) => (
            <a
              href={`/ledere/${slug}`}
              class="w-full transition-transform hover:scale-105 sm:w-1/2 md:w-1/3 lg:w-1/4"
            >
              <PersonCard name={name} image={image}>
                {title} av{" "}
                <span class="font-medium text-primary">
                  {leaderOf
                    .map((ref) => getGroup(ref.group)?.data.name)
                    .join(", ")}
                </span>
              </PersonCard>
            </a>
          ),
        )
      }
    </div>

    <p class="mx-auto max-w-prose">
      Men {supremeLeaderPronoun} kan ikke få til alt alene! For å virkelig få revyen
      i gang trenger vi også ledere for hver av revyens <Link href="/grupper"
        >grupper</Link
      >. De rollene fylles av disse fantastiske folka!
    </p>

    <Grid class="!gap-10 pt-6">
      {
        plebians.map(({ slug, data: { name, title, image, leaderOf } }) => (
          <a
            href={`/ledere/${slug}`}
            class="transition-transform hover:scale-105"
          >
            <PersonCard name={name} image={image}>
              {title} av{" "}
              <span class="font-medium text-primary">
                {leaderOf
                  .map((ref) => getGroup(ref.group)?.data.name)
                  .join(", ")}
              </span>
            </PersonCard>
          </a>
        ))
      }
    </Grid>
  </div>
</PageLayout>
