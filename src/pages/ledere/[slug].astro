---
import ArticleLayout from "@/layouts/ArticleLayout.astro";

import Card from "@/components/Card/Card.astro";
import Link from "@/components/LinkButton/Link.astro";
import { Image } from "astro:assets";

import { getEntries } from "astro:content";
import {
  getEntry,
  render,
  getCollection,
  type ValidContentEntrySlug,
} from "astro:content";
import type { CollectionEntry } from "astro:content";

export async function getStaticPaths() {
  const entries = await getCollection("ledere");
  const list = entries.map((entry) => ({ params: { slug: entry.slug } }));
  return list;
}

const { slug }: { slug: ValidContentEntrySlug<"ledere"> } = Astro.params;

const entry = await getEntry("ledere", slug);
const { name, image, leaderOf } = entry.data;

const groups = await getEntries(leaderOf.map((ref) => ref.group));

function getGroup(groupRef: {
  collection: "grupper";
  slug: ValidContentEntrySlug<"grupper">;
}) {
  return groups.find((group) => group.slug === groupRef.slug);
}

const alt = leaderOf
  .map((ref) => `${ref.title} of ${getGroup(ref.group)?.data.name}`)
  .join(", ");

// Witchcraft? Yes. Works? Also yes. Fix if you can plz.
const leaderOfGroups = await leaderOf.reduce<
  | { [title: string]: CollectionEntry<"grupper">[] }
  | Promise<{ [title: string]: CollectionEntry<"grupper">[] }>
>(async (acc, ref) => {
  let nextAcc = await acc;
  // Fuck it, force it to be a type which probably works or something.
  nextAcc[ref.title] = [
    getGroup(ref.group) as CollectionEntry<"grupper">,
    ...(nextAcc[ref.title] ?? []),
  ];
  return nextAcc;
}, {});

const { Content } = await render(entry);
---

<ArticleLayout title={name}>
  <Image
    src={image}
    width={500}
    height={500}
    alt={alt}
    class="rounded-lg w-56"
  />

  <Content />

  <Card class="mt-12 max-w-screen-sm w-full">
    <h2 class="text-lg leading-none mt-0 mb-3">Grupper</h2>
    {
      Object.entries(leaderOfGroups).map(([title, groups]) => (
        <div class="font-medium flex sm:flex-row flex-col gap-1">
          {title}:
          <div class="flex sm:flex-row flex-col">
            {groups.map((group) => (
              <>
                <Link href={`/grupper/${group.slug}`}>{group.data.name}</Link>
                <span class="mr-1 sm:inline-block hidden last:hidden">,</span>
              </>
            ))}
          </div>
        </div>
      ))
    }
  </Card>
</ArticleLayout>
