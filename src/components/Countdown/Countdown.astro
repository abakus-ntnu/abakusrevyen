---
interface Props {
  date: Date | string;
}

const { date } = Astro.props;

// Convert string date to Date object if needed
const targetDate = typeof date === "string" ? new Date(date) : date;
---

<div class="flex space-x-[1.5rem] font-lcd">
  <div class="segment">
    <span class="digit" id="days">00</span><span>DD</span>
  </div>
  <div class="segment">
    <span class="digit" id="hours">00</span><span>HH</span>
  </div>
  <div class="segment">
    <span class="digit" id="minutes">00</span><span>MIN</span>
  </div>
  <div class="segment">
    <span class="digit" id="seconds">00</span><span>SEC</span>
  </div>
</div>

<style>
  .segment {
    @apply flex flex-col items-center;
  }

  .digit {
    @apply text-2xl;
  }
</style>

<script is:inline define:vars={{ targetDate: targetDate.getTime() }}>
  function updateCountdown() {
    // Add leading zeros and update
    document.getElementById("days").textContent = String(days).padStart(2, "0");
    document.getElementById("hours").textContent = String(hours).padStart(
      2,
      "0",
    );
    document.getElementById("minutes").textContent = String(minutes).padStart(
      2,
      "0",
    );

    // Add pulse animation to seconds
    const secondsEl = document.getElementById("seconds");
    secondsEl.textContent = String(seconds).padStart(2, "0");
    secondsEl.style.animation = "pulse 1s";
    secondsEl.addEventListener("animationend", () => {
      secondsEl.style.animation = "";
    });

    if (distance < 0) {
      window.location.reload();
      clearInterval(countdown);
      ["days", "hours", "minutes", "seconds"].forEach((id) => {
        document.getElementById(id).textContent = "00";
      });
    }
  }

  const countdown = setInterval(updateCountdown, 100);
  updateCountdown();
</script>
